import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib
import matplotlib.font_manager as fm

# ---------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤ ----------
st.set_page_config(page_title="MyTCAS Dashboard", layout="wide")

# ---------- ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ----------
font_path = "C:/Windows/Fonts/LeelawUI.ttf"
font_prop = fm.FontProperties(fname=font_path)
matplotlib.rcParams['font.family'] = font_prop.get_name()

# ---------- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ----------
df = pd.read_json("data/rearranged_courses_tuition_numeric.json")
df['total_admission'] = df[['‡∏£‡∏≠‡∏ö 1 Portfolio', '‡∏£‡∏≠‡∏ö 2 Quota', '‡∏£‡∏≠‡∏ö 3 Admission', '‡∏£‡∏≠‡∏ö 4 Direct Admission']].sum(axis=1, skipna=True)

# ---------- ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤ ----------
st.sidebar.title("üîé ‡πÄ‡∏°‡∏ô‡∏π")
page = st.sidebar.radio("‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤", ["üìä Dashboard", "üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"])

# ---------- ‡∏´‡∏ô‡πâ‡∏≤ Dashboard ----------
if page == "üìä Dashboard":
    st.title("üéì Dashboard ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå (MyTCAS)")

    # Filter
    selected_university = st.sidebar.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢", sorted(df['university'].unique()))
    selected_program_type = st.sidebar.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", df['program_type'].unique())

    df_filtered = df.copy()
    if selected_university:
        df_filtered = df_filtered[df_filtered['university'].isin(selected_university)]
    if selected_program_type:
        df_filtered = df_filtered[df_filtered['program_type'].isin(selected_program_type)]

    # Chart 1
    st.header("1Ô∏è‚É£ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢")
    avg_tuition = df_filtered.groupby('university')['tuition'].mean().sort_values(ascending=False)
    st.bar_chart(avg_tuition)

    # Chart 2
    st.header("2Ô∏è‚É£ Boxplot ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£")
    fig1, ax1 = plt.subplots(figsize=(10, 4))
    sns.boxplot(data=df_filtered, x="program_type", y="tuition", ax=ax1)
    st.pyplot(fig1)

    # Chart 3
    st.header("3Ô∏è‚É£ Histogram: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°")
    fig2, ax2 = plt.subplots(figsize=(10, 4))
    ax2.hist(df_filtered['tuition'], bins=20, edgecolor='black')
    ax2.set_xlabel("‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° (‡∏ö‡∏≤‡∏ó)")
    ax2.set_ylabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£")
    st.pyplot(fig2)

    # Chart 4
    st.header("4Ô∏è‚É£ Scatter: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°")
    fig3, ax3 = plt.subplots(figsize=(10, 4))
    ax3.scatter(df_filtered['total_admission'], df_filtered['tuition'])
    ax3.set_xlabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏° (‡∏ó‡∏∏‡∏Å‡∏£‡∏≠‡∏ö)")
    ax3.set_ylabel("‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° (‡∏ö‡∏≤‡∏ó)")
    st.pyplot(fig3)

    # Chart 5
    st.header("5Ô∏è‚É£ ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£")
    pie_data = df_filtered['program_type'].value_counts()
    fig4, ax4 = plt.subplots()
    ax4.pie(pie_data, labels=pie_data.index, autopct="%1.1f%%", startangle=90)
    ax4.axis("equal")
    st.pyplot(fig4)

    # Chart 6 - Bar Chart ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
    st.header("6Ô∏è‚É£ Bar Chart: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö")
    round_columns = ['‡∏£‡∏≠‡∏ö 1 Portfolio', '‡∏£‡∏≠‡∏ö 2 Quota', '‡∏£‡∏≠‡∏ö 3 Admission', '‡∏£‡∏≠‡∏ö 4 Direct Admission']
    round_sums = df_filtered[round_columns].sum(skipna=True)
    colors = ['#4F81BD', '#9BBB59', '#8064A2', '#A5A5A5']  # ‡∏ü‡πâ‡∏≤ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡∏°‡πà‡∏ß‡∏á ‡πÄ‡∏ó‡∏≤

    fig5, ax5 = plt.subplots(figsize=(8, 5))
    bars = ax5.bar(round_sums.index, round_sums.values, color=colors)

    for bar in bars:
        height = bar.get_height()
        ax5.annotate(f'{int(height):,}', xy=(bar.get_x() + bar.get_width() / 2, height),
                     xytext=(0, 3), textcoords="offset points",
                     ha='center', va='bottom', fontsize=10)

    ax5.set_ylabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°", fontsize=12)
    ax5.set_xlabel("‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£", fontsize=12)
    ax5.set_title("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£", fontsize=14)
    ax5.set_ylim(0, round_sums.max() * 1.15)
    ax5.legend(bars, round_sums.index, title="‡∏£‡∏≠‡∏ö", loc="upper right")

    st.pyplot(fig5)

# ---------- ‡∏´‡∏ô‡πâ‡∏≤ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ----------
elif page == "üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
    st.title("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

    col1, col2 = st.columns(2)
    with col1:
        selected_uni = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢", sorted(df['university'].unique()))
    with col2:
        selected_field = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤", sorted(df['field'].unique()))

    df_table = df.copy()
    if selected_uni:
        df_table = df_table[df_table['university'].isin(selected_uni)]
    if selected_field:
        df_table = df_table[df_table['field'].isin(selected_field)]

    if 'url' in df_table.columns:
        df_table = df_table.drop(columns=['url'])

    st.dataframe(df_table.reset_index(drop=True), use_container_width=True)
